// mixins
@mixin font($f-name, $f-style, $f-weight, $f-url, $url:none)
	@font-face
		font-family: $f-name
		font-display: swap
		font-style: $f-style
		@if $f-weight != 0
			font-weight: $f-weight
		src: url($f-url) if($url != none, #{','} $url format('woff2'), format('woff2'))
	
@mixin font-settings($font:false, $colour:false, $size:false, $case:false, $weight:false, $lh:false)
	@if $font
		font-family: "#{$font}",#{$default-fonts}
	@else
		font-family: $default-fonts
	@if $size
		font-size: $size 
	@if $colour
		color: $colour 
	@if $case
		text-transform: $case 
	@if $weight
		font-weight: $weight 
	@if $lh
		line-height: $lh 

//Убираем единицы измерения у чисел
@function strip-units($size)
	$number: $size / ($size * 0 + 1)
	@return $number

@function em($pixels, $fontsize: $base-font-size)
	$fontsize: $fontsize + 0px
	@return ($pixels/$fontsize)*1em

@function px($em, $fontsize: $base-font-size)
	@return round(strip-units($em) * strip-units($fontsize))*1px

//Автоматическое центрирование
@mixin push--auto 
	margin:
		left: auto
		right: auto

//модальное окно в полный экран
@mixin modal
	position: absolute
	left: 0
	right: 0
	top: 0
	bottom: 0

// Вычисляем высоту блока за вычетом видимых в области экрана
// например: height: calc-height($header-height, $nav-height, $top-bar-height)
@function calc-height($h1, $h2:0, $h3:0)
	$h: strip-units($h1) + strip-units($h2) + strip-units($h3)
	@return calc(100vh - #{$h}px )


@mixin animation($name, $animation, $fade:no-fade, $x:0, $y:0, $x1:0, $y1:0)
	animation: animation-#{$name} $animation
	@content
	
	@keyframes animation-#{$name}
		0%
			@if $fade != no-fade
				opacity: if($fade == Out, 1, 0)
			@if strip-units($x)+strip-units($y)+strip-units($x1)+strip-units($y1) != 0
				transform: translate($x, $y)

		100%
			@if $fade != no-fade
				opacity: if($fade == Out, 0, 1)
			@if strip-units($x)+strip-units($y)+strip-units($x1)+strip-units($y1) != 0
				transform: translate($x1, $y1)

@mixin animation-delays($items, $start-delay:0ms, $between-delay:50ms)
	@for $i from 0 through $items 
		&:nth-child(#{$i + 1}) 
			animation-delay: $start-delay+($between-delay*($i))

// Magic parallax mixins

$parallax-perspective : 1 !default
$parallax-element     : "body" !default
$parallax-ios         : true !default

@mixin parallax-init($perspective: $parallax-perspective, $element: $parallax-element, $parallax-ios: $parallax-ios)
	@if $element == "body"
		html, body
			width: 100%
			height: 100%
			margin: 0
			padding: 0
			overflow: hidden

	#{$element}
		overflow: auto
		perspective: $perspective * 1px
		transform-style: preserve-3d
		// Allows for smooth scrolling but disables parallax effects.
		@if $parallax-ios == false
			-webkit-overflow-scrolling: touch
		// Preserve 3D
		&, *
		transform-style: preserve-3d

@mixin parallax($distance: 0, $perspective: $parallax-perspective)
	transform: translateZ($distance * $perspective * 1px) scale(abs($distance - 1))
	z-index: $distance * 1000

// End of magic parallax mixins
@mixin transition-delays($items, $start-delay:0ms, $between-delay:50ms)
	@for $i from 0 through $items 
		&:nth-child(#{$i + 1}) 
			transition-delay: $start-delay+($between-delay*($i))
						
// Миксин для создания масштабируемыхэлементов(обычно изображения/картинки заднего фона), 
// чтобы поддерживать соотношение. Пример: @include responsive-ratio(16,9)
@mixin responsive-ratio($x, $y, $pseudo:false)
	$padding: unquote(( $y / $x )*100+'%')
	@if $pseudo
		&::before
			@include pseudo($pos: relative)
			width: 100%
			padding-top: $padding
	@else
		padding-top: $padding

//миксин создает треугольники. Задаются цвет, размер и направление
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false)
	@include pseudo($pos: $position)
	width: 0
	height: 0
	@if $round 
		border-radius: 3px
	@if $direction == down 
		border-left: $size solid transparent
		border-right: $size solid transparent
		border-top: $size solid $color
		margin-top: (0 - round( $size / 2.5 ))
	@else if $direction == up 
		border-left: $size solid transparent
		border-right: $size solid transparent
		border-bottom: $size solid $color
		margin-bottom: 0 - round( $size / 2.5 )
	@else if $direction == right 
		border-top: $size solid transparent
		border-bottom: $size solid transparent
		border-left: $size solid $color
		margin-right: -$size
	@else if  $direction == left 
		border-top: $size solid transparent
		border-bottom: $size solid transparent
		border-right: $size solid $color
		margin-left: -$size

// Responsive image
// Keep images from scaling beyond the width of their parents.
@mixin img-responsive
	img
		max-width: 100%
		height: auto

// Retina image
// Short retina mixin for setting background-image and -size.
@mixin img-retina($file-1x, $file-2x, $width-1x, $height-1x)
	background-image: url($file-1x)

	// Autoprefixer takes care of adding -webkit-min-device-pixel-ratio and -o-min-device-pixel-ratio,
	// but doesn't convert dppx=>dpi.
	// There's no such thing as unprefixed min-device-pixel-ratio since it's nonstandard.
	// Compatibility info: https://caniuse.com/#feat=css-media-resolution
	@media only screen and (min-resolution: 192dpi), // IE9-11 don't support dppx
	only screen and (min-resolution: 2dppx) // Standardized
		background-image: url($file-2x)
		background-size: $width-1x $height-1x
